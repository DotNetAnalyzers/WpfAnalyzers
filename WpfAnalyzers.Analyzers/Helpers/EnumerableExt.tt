<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
namespace WpfAnalyzers
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using Microsoft.CodeAnalysis;

    internal static partial class EnumerableExt
    {
<#
    var typeNames = new Data[]
    {
        new Data("IReadOnlyList<T>", "T"),
        new Data("ImmutableArray<T>", "T", count: "Length"),
        new Data("ChildSyntaxList", "SyntaxNodeOrToken"),
        new Data("SeparatedSyntaxList<T>", "T", "SyntaxNode"),
        new Data("SyntaxList<T>", "T", "SyntaxNode"),
        new Data("SyntaxNodeOrTokenList", "SyntaxNodeOrToken"),
        new Data("SyntaxTokenList", "SyntaxToken"),
        new Data("SyntaxTriviaList", "SyntaxTrivia"),
    };

    foreach(var types in typeNames)
    {
        var colName = types.CollectionType;
        var itemName = types.ItemType;
        var constraint = types.Constraint;
        var count = types.Count;
        var genericArg = types.GenericArg;
        WriteLineIfNotFirst(types, typeNames);
#>
        internal static bool TryGetAtIndex<#= genericArg #>(this <#= colName #> source, int index, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            if (source.<#= count #> <= index)
            {
                return false;
            }

            result = source[index];
            return true;
        }

        internal static bool TryGetSingle<#= genericArg #>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            if (source.<#= count #> == 1)
            {
                result = source[0];
                return true;
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetSingle<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            foreach (var item in source)
            {
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetFirst<#= genericArg #>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            if (source.<#= count #> == 0)
            {
                result = default(<#= itemName #>);
                return false;
            }

            result = source[0];
            return true;
        }

        internal static bool TryGetFirst<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            foreach (var item in source)
            {
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetLast<#= genericArg #>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            if (source.<#= count #> == 0)
            {
                result = default(<#= itemName #>);
                return false;
            }

            result = source[source.<#= count #> - 1];
            return true;
        }

        internal static bool TryGetLast<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            for (var i = source.<#= count #> - 1; i >= 0; i--)
            {
                var item = source[i];
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }
<#  }    #>
    }
}
<#+
private void WriteLineIfNotFirst<T>(T item, T[] items)
    where T : class 
{
    if (!ReferenceEquals(items[0], item))
    {
        this.WriteLine("");
    }
}

internal class Data
{
    public readonly string CollectionType;
    public readonly string ItemType;
    public readonly string Constraint;
    public readonly string Count;
    public readonly string GenericArg;

    public Data(string collectionType, string itemType, string constraint = null, string count = null)
    {
        this.CollectionType = collectionType;
        this.ItemType = itemType;
        this.Constraint = string.IsNullOrEmpty(constraint)
            ? string.Empty
            : "\r\n            where T : " + constraint;
        this.Count = count ?? "Count";
        this.GenericArg = itemType == "T" ? "<T>" : string.Empty;
    }
}
#>
